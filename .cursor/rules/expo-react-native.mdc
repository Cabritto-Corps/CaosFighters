---
alwaysApply: true
---

# Expo React Native - Desenvolvimento Mobile

## Framework e Ferramentas

### Expo Configuration
- Projeto usa Expo com React Native
- [app.json](mdc:app.json) contém configuração principal do app
- Use Expo CLI para desenvolvimento e build
- Expo Router para navegação baseada em arquivo

### Expo Router ([src/app/](mdc:src/app/))
- Navegação baseada em estrutura de arquivos
- [_layout.tsx](mdc:src/app/_layout.tsx) define layout principal
- Rotas organizadas por funcionalidade (auth/, battle, etc)

```typescript
// src/app/_layout.tsx - exemplo de configuração
export default function RootLayout() {
  return (
    <Stack screenOptions={{
      headerStyle: { backgroundColor: '#1a1a1a' },
      headerTintColor: '#fff',
    }}>
      <Stack.Screen name="index" options={{ headerShown: false }} />
      <Stack.Screen name="battle" options={{ title: 'Batalha' }} />
    </Stack>
  );
}
```

### Expo Features para Jogos

#### Audio com Expo AV
- Use expo-av para música de fundo e efeitos sonoros
- [src/utils/MusicManager.ts](mdc:src/utils/MusicManager.ts) centraliza controle de áudio
- Implemente controles de volume e mute

#### Assets com Expo Asset
- Use expo-asset para preload de imagens
- Organize assets em [assets/](mdc:assets/) seguindo convenções Expo
- Otimize para diferentes densidades de tela

#### Haptics para Feedback
- Use expo-haptics para feedback tátil em ataques
- Diferentes intensidades para diferentes tipos de ação
- Respeite configurações de acessibilidade do usuário

```typescript
import * as Haptics from 'expo-haptics';

const executeAttack = async (attack: Attack) => {
  // Feedback tátil baseado no tipo de ataque
  if (attack.type === 'CRITICAL') {
    await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy);
  } else {
    await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
  }
};
```

### Build e Deployment

#### EAS Build
- Configure profiles no eas.json para development/preview/production
- Use Expo Updates para hot fixes
- Implemente code signing adequado

#### Metro Configuration
- [metro.config.js](mdc:metro.config.js) otimizado para performance
- Configure asset resolvers para assets do jogo
- Use tree shaking para reduzir bundle size

### Performance Mobile com Expo

#### Startup Time
- Use expo-splash-screen para loading inicial
- Preload assets críticos durante splash
- Lazy load componentes não críticos

#### Memory Management
- Use expo-gl para rendering pesado se necessário
- Implemente pooling de objetos para personagens
- Monitor memory usage com Flipper

#### Offline Support
- Use expo-sqlite para dados locais
- Implemente sync quando conexão retornar
- Cache assets críticos localmente

### Debugging com Expo

#### Development Tools
- Expo DevTools para debugging remoto
- Use __DEV__ flag para código debug-only
- Configure remote debugging para dispositivos físicos

```typescript
if (__DEV__) {
  console.log('Debug: Battle state', battleState);
}
```

#### Error Reporting
- Configure expo-error-recovery para crashes
- Use Sentry com Expo para produção
- Implemente fallbacks gracosos para erros