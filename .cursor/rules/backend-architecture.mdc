---
alwaysApply: true
---

# Backend Architecture - Clean Architecture para Mobile Game

## Camadas da Aplicação

### Domain Layer ([backend/domain/](mdc:backend/domain/))
- **Entities**: Regras de negócio fundamentais do jogo
- **Services**: Casos de uso e orquestração de entidades  
- **Repositories**: Interfaces para persistência de dados

#### Entities - Regras para Jogo Mobile
```typescript
// Character.ts - otimizado para mobile
export class Character {
  constructor(
    public readonly id: string,
    public readonly name: string,
    private _health: number,
    public readonly attacks: readonly [Attack, Attack, Attack, Attack] // Exatamente 4
  ) {
    this.validateForMobile();
  }
  
  private validateForMobile(): void {
    // Validações específicas para limitações mobile
    if (this.attacks.length !== 4) {
      throw new Error('Personagem deve ter exatamente 4 ataques');
    }
  }
}
```

### Infrastructure Layer ([backend/infra/](mdc:backend/infra/))
- **Gateways**: Implementações usando Supabase ([backend/infra/gateways/](mdc:backend/infra/gateways/))
- **Mappers**: Conversão otimizada para mobile ([backend/infra/mappers/](mdc:backend/infra/mappers/))
- **Supabase Client**: [backend/infra/supabase/client.ts](mdc:backend/infra/supabase/client.ts)

## Services para Mobile Game

### Battle Service ([backend/domain/services/BattleService.ts](mdc:backend/domain/services/BattleService.ts))
- Otimizado para latência mobile
- Validação local antes de sync com servidor
- Estado offline para continuar batalha sem internet

```typescript
class BattleService {
  async executeTurn(
    battleId: string, 
    playerId: string, 
    attackId: string
  ): Promise<BattleResult> {
    // 1. Validação local instantânea
    // 2. Aplicar mudanças otimisticamente  
    // 3. Sync com servidor em background
    // 4. Rollback se necessário
  }
}
```

### Realtime Service ([backend/domain/services/RealtimeService.ts](mdc:backend/domain/services/RealtimeService.ts))
- WebSockets otimizados para mobile
- Reconnection automática em mudança de rede
- Batching de updates para economizar bateria

### Character Service ([backend/domain/services/CharacterService.ts](mdc:backend/domain/services/CharacterService.ts))
- Geração de personagens balanceados
- Cache local de personagens para performance
- Algoritmo determinístico para reproduzibilidade

## State Management

### Battle State ([backend/state/battle.store.ts](mdc:backend/state/battle.store.ts))
- Estado sincronizado entre jogadores
- Snapshot/restore para reconexões
- Otimizado para memoria limitada mobile

### Session State ([backend/state/session.store.ts](mdc:backend/state/session.store.ts))
- Autenticação persistente
- Preferências de usuário
- Estatísticas locais

## Database Integration

### Supabase para Mobile
- Real-time subscriptions para batalhas ativas
- Offline-first com sync quando online
- Otimização de queries para conexões móveis lentas

```typescript
// Exemplo de query otimizada para mobile
const getBattleState = async (battleId: string) => {
  return supabase
    .from('battles')
    .select(`
      *,
      participants:battle_participants(
        user_id,
        character:characters(id, name, attacks)
      )
    `)
    .eq('id', battleId)
    .single();
};
```

### Performance Backend Mobile

#### Connection Management
- Connection pooling configurado para picos de uso
- Timeout adequado para redes móveis instáveis
- Retry logic com backoff exponencial

#### Data Optimization
- Payload mínimo para economizar dados móveis
- Compressão de responses grandes
- Delta sync em vez de full sync

#### Caching Strategy
- Cache agressivo para dados estáticos (personagens, ataques)
- TTL apropriado para dados dinâmicos
- Invalidação coordenada entre instâncias

## Security para Mobile

### Authentication Mobile
- JWT tokens com refresh automático
- Biometric auth quando disponível
- Session management segura

### API Rate Limiting
- Limites por usuário para prevenir abuse
- Diferentes limites para ações críticas vs não-críticas
- Whitelist para contas de teste/desenvolvimento

### Data Validation
- Validação dupla (client + server)
- Sanitização de inputs de usuário
- Prevenção de cheating em cálculos de batalha