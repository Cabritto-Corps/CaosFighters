---
alwaysApply: true
---

# Expo Development Workflow

## Desenvolvimento Local

### Comandos Expo Essenciais
```bash
# Iniciar desenvolvimento
npx expo start
npx expo start --clear  # Limpa cache

# Backend separado (Node.js)
npm run dev:backend     # Usando nodemon-backend.json

# Testes
npm test                # Frontend tests
npm run test:backend    # Backend tests
```

### Expo DevTools
- Use QR code para testar em dispositivos físicos
- Metro bundler para hot reload
- Debug com Flipper para performance profiling

### Environment Setup
- Configure [backend/env.example](mdc:backend/env.example) para variáveis
- Use diferentes configs para dev/staging/prod
- Mantenha secrets fora do código

## Build e Deployment

### EAS Build Configuration
```json
// eas.json
{
  "build": {
    "development": {
      "developmentClient": true,
      "distribution": "internal"
    },
    "preview": {
      "distribution": "internal",
      "android": {
        "buildType": "apk"
      }
    },
    "production": {
      "autoIncrement": true
    }
  }
}
```

### Expo Updates
- Use para hot fixes sem rebuild completo
- Estratégia de rollback para updates problemáticos
- Versionamento semântico para updates

## Project Structure com Expo

### App Configuration ([app.json](mdc:app.json))
- Configure splash screen e icons
- Permissions necessárias (audio, haptics)
- Orientation locks para jogo

### Metro Configuration ([metro.config.js](mdc:metro.config.js))
- Asset resolver otimizado
- Exclude desnecessário do bundle
- Source map configuration para debugging

### TypeScript Setup
- [expo-env.d.ts](mdc:expo-env.d.ts) para types Expo
- [tsconfig.json](mdc:tsconfig.json) configurado para Expo
- Strict mode habilitado

## Performance Monitoring

### Expo Analytics
- Track user engagement em batalhas
- Monitor crash rates por dispositivo
- Performance metrics (FPS, memory)

### Development Metrics
- Bundle size tracking
- Build time optimization  
- Test execution time

## Debugging Mobile Game

### Network Debugging
- Use Expo Network Inspector
- Mock APIs para desenvolvimento offline
- Log request/response para debugging

### Game State Debugging
- Estado de batalha visível em dev tools
- Snapshot/restore para reproduzir bugs
- Debug mode com informações extras na UI

```typescript
const DebugInfo = ({ battle }: { battle: Battle }) => {
  if (!__DEV__) return null;
  
  return (
    <View style={styles.debugPanel}>
      <Text>Turn: {battle.currentTurn}</Text>
      <Text>Phase: {battle.phase}</Text>
      <Text>Players: {battle.players.length}</Text>
    </View>
  );
};
```

### Performance Debugging
- Use Expo Performance Monitor
- Profile re-renders com React DevTools
- Monitor memory usage durante batalhas longas